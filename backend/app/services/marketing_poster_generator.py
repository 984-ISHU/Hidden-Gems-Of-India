from google import genai
from google.genai import types
from PIL import Image
from io import BytesIO

client = genai.Client(api_key="AIzaSyDenK8dsy1zHsMAW47A1LPCIDkxdMGqm7c")

def generate_minimal_marketing_poster(image_bytes: bytes, product_name: str = "") -> bytes:
    """
    Generate a marketing poster image using Gemini 2.5 Flash Image Preview.
    The poster will have minimal, neat text overlaid on the original image.
    """
    # Load the image from bytes
    image_input = Image.open(BytesIO(image_bytes))

    # Compose the prompt
    text_input = (
        "Using the provided product image, add a minimal, neat, and clean marketing tagline or phrase directly on the image. "
        "Keep the text short, visually appealing, and placed in a way that does not obscure the product. "
        "Do not alter the image except for the text overlay. "
        f"Product name (if any): {product_name}"
    )

    # Call Gemini to generate the poster image
    response = client.models.generate_content(
        model="gemini-2.5-flash-image-preview",
        contents=[text_input, image_input],
    )

    # Extract the generated image from the response
    image_parts = [
        part.inline_data.data
        for part in response.candidates[0].content.parts
        if hasattr(part, "inline_data") and part.inline_data
    ]

    if image_parts:
        poster_image = Image.open(BytesIO(image_parts[0]))
        output = BytesIO()
        poster_image.save(output, format="JPEG", quality=95)
        return output.getvalue()
    else:
        raise RuntimeError("No image generated by Gemini.")
