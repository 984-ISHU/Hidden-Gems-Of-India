from google import genai
from google.genai import types
from PIL import Image
from io import BytesIO
import os 
from dotenv import load_dotenv
load_dotenv()

GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
client = genai.Client(api_key=GEMINI_API_KEY)

def generate_minimal_marketing_poster(image_bytes: bytes, product_name: str = "") -> bytes:
    image_input = Image.open(BytesIO(image_bytes))
    img_byte_arr = BytesIO()
    image_input.save(img_byte_arr, format='JPEG')
    img_byte_arr = img_byte_arr.getvalue()

    text_input = (
        "Using the provided product image, add a minimal, neat, and clean marketing tagline or phrase directly on the image. "
        "Keep the text short, visually appealing, and placed in a way that does not obscure the product. "
        "Do not alter the image except for the text overlay. "
        f"Product name (if any): {product_name}"
    )

    parts = [
        types.Part(text=text_input),
        types.Part(inline_data=types.Blob(mime_type="image/jpeg", data=img_byte_arr))
    ]
    content = types.Content(parts=parts)

    response = client.models.generate_content(
        model="gemini-2.0-flash-preview-image-generation",
        contents=content,
        config=types.GenerateContentConfig(response_modalities=['TEXT', 'IMAGE'])
    )

    for part in response.candidates[0].content.parts:
        if hasattr(part, "inline_data") and part.inline_data:
            return part.inline_data.data

    raise RuntimeError("No image generated by Gemini.")